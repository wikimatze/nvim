# comment block
snippet =b
  =begin
    ${1}
  =end
# yields
snippet y
  :yields: ${1:arguments}
# begin
snippet beg
  begin
    ${3}
  rescue ${1:Exception} => ${2:e}
  end
# require
snippet req
  require "${1}"${2}
# end
snippet end
  __END__
# control structures
snippet case
  case ${1:object}
  when ${2:condition}
    ${3}
  end
snippet when
  when ${1:condition}
    ${2}
snippet def
  def ${1:method_name}
    ${2}
  end
snippet if
  if ${1:condition}
    ${2}
  end
snippet ife
  if ${1:condition}
    ${2}
  else
    ${3}
  end
snippet elsif
  elsif ${1:condition}
    ${2}
snippet unless
  unless ${1:condition}
    ${2}
  end
snippet while
  while ${1:condition}
    ${2}
  end
snippet for
  for ${1:e} in ${2:c}
    ${3}
  end
snippet until
  until ${1:condition}
    ${2}
  end
snippet mod
  module ${1}
    ${2}
  end
# attr_reader
snippet r
  attr_reader :${1:attr_names}
# attr_writer
snippet w
  attr_writer :${1:attr_names}
# attr_accessor
snippet rw
  attr_accessor :${1:attr_names}
# def method_missing
snippet defmm
  def method_missing(meth, *args, &blk)
    ${1}
  end
snippet ea
  each { |${1:e}| ${2} }
snippet ead
  each do |${1:e}|
    ${2}
  end
snippet :
  :${1:key} => ${2:"value"}${3}
